# orders/handlers.py

import logging
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, Filters
from .models import Order
from .utils import send_status_update

logger = logging.getLogger(__name__)

def start(update: Update, context):
    logger.info(f"Received /start from {update.message.from_user.id}")
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?')

def help_command(update: Update, context):
    logger.info(f"Received /help from {update.message.from_user.id}")
    update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/help\n/order\n/analytics')

def order_command(update: Update, context):
    logger.info(f"Received /order from {update.message.from_user.id}")
    update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.')

def handle_message(update: Update, context):
    text = update.message.text
    logger.info(f"Received message from {update.message.from_user.id}: {text}")
    try:
        bouquet, address = text.split(',', 1)
        order = Order.objects.create(
            user=update.message.from_user.id,
            bouquet=bouquet.strip(),
            address=address.strip(),
            status='pending'
        )
        logger.info(f"Created Order #{order.id} for user {update.message.from_user.id}")
        update.message.reply_text(f'–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ.')
    except ValueError:
        logger.warning(f"Invalid order format from {update.message.from_user.id}: {text}")
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.')

def analytics_command(update: Update, context):
    logger.info(f"Received /analytics from {update.message.from_user.id}")
    from django.db.models import Count

    total_orders = Order.objects.count()
    pending = Order.objects.filter(status='pending').count()
    confirmed = Order.objects.filter(status='confirmed').count()
    shipped = Order.objects.filter(status='shipped').count()
    delivered = Order.objects.filter(status='delivered').count()
    cancelled = Order.objects.filter(status='cancelled').count()

    message = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤**\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"–í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {shipped}\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered}\n"
        f"–û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}"
    )

    update.message.reply_text(message, parse_mode='Markdown')

def setup_dispatcher(dispatcher):
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("order", order_command))
    dispatcher.add_handler(CommandHandler("analytics", analytics_command))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
